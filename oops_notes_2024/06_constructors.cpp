// overloaded constructor 
// parameterized constructor
// default constructor

#include <iostream>
using namespace std;
class person{
	private:
		int age;
		double height;
	public:
	// a constructor is a member function that is executed automatically whenever an object is created.no return type is used for constructors.
	// if multiple members must be initialized they are separated by commas,the result is the initializer list also called member-inititalization list.
	// The initializer list is more efficient than assigning values in the constructor body.
	// In C++, a default constructor is a special member function that is automatically generated by the compiler if no constructor is explicitly defined in the class.
	// If a developer decides to define their own default constructor, they can do so by explicitly providing a constructor with no parameters.
		
		// Default constructor (no args)
		person() : age(0),height(0) //initializer list
		{
			cout<<"i am no arg constructor"<<endl;
		}
		
		// Parameterized constructor (two args)
		person(int a,double h) : age(a),height(h){
			cout<<"i am two arg constructor"<<endl;
		}

		void show(){
			cout<<"age of person:"<<age<<"\n height of person:"<<height<<endl;
		}
};
int main(){

	// initializing values using constructors
	person p1;  // calls the default constructor (that was initialized by the developer)
	person p2(31,6.1);	// calls the two-argument constructor 
	
     
	p1.show(),p2.show();
	cout<<endl;

	return 0;
}
/*
In C++, the same constructor is called whether you create an object statically or dynamically using the new keyword. The constructor is responsible for initializing the object, and it is invoked in both cases.
Whether you allocate memory on the stack or the heap, the constructor is invoked when the object is created.
*/